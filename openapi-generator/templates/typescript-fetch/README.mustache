## {{npmName}}@{{npmVersion}}

Ducksms is a leading SMS messaging service provider offering one-way SMS communication services from your internet enabled computer. The API allow you to directly communicate and manage a SMS with our SMS gateway system.

## Official API Documentation

https://docs.ducksms.com/developer/api-documentation

## This SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
- Package version: {{npmVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{npmName}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}


This generator creates TypeScript/JavaScript client that utilizes [Fetch API](https://fetch.spec.whatwg.org/). The generated Node module can be used in the following environments:

Environment
* Node.js
* Webpack
* Browserify

Language level
* ES5 - you must have a Promises/A+ library installed
* ES6

Module system
* CommonJS
* ES6 module system

It can be used in both TypeScript and JavaScript. In TypeScript, the definition should be automatically resolved via `package.json`. ([Reference](http://www.typescriptlang.org/docs/handbook/typings-for-npm-packages.html))

### Building

To build and compile the typescript sources to javascript use:
```
npm install
npm run build
```

### Publishing

First build the package then run ```npm publish```

### Installation

navigate to the folder of your consuming project and run one of the following commands.

_published:_


```
npm install {{npmName}}@{{npmVersion}} --save
```

if you are using yarn


```
yarn install {{npmName}}@{{npmVersion}}
```

_unPublished (not recommended):_

```
npm install PATH_TO_GENERATED_PACKAGE --save
```


## Getting Started

Please follow the [installation](#installation) procedure and then run the following code:

```typescript
import {Configuration, CreditApi} from "{{npmName}}"

const configuration = new Configuration({apiKey: 'token API_TOKEN'})

const creditApi = new CreditApi(configuration)

let requestParameters = {
  page: 1
}

creditApi.creditHistory(requestParameters).then(function (data) { console.log(data) })
```

## Getting Started in Node.js

This package is using window and FormData so make sure to have polyfills for it

here is the example package.json

```
{
  "name": "openapi_typescript_test",
  "version": "1.0.0",
  "description": "",
  "main": "dist/index.js",
  "scripts": {
    "start": "tsc && node dist/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@types/node": "^14.0.1",
    "form-data": "^3.0.0",
    "node-fetch": "^2.6.0",
    "ducksms-js": "^{{npmVersion}}"
  },
  "devDependencies": {
    "tslint": "^5.20.1",
    "typescript": "^3.9.2"
  }
}
```

and you can use it as follows

```
import {Configuration, CreditApi} from "ducksms-js"
var FormData = require("form-data")
var fetch = require("node-fetch")


const globalAny: any = global;
globalAny.window = {
  fetch
}
globalAny.FormData = FormData

const configuration = new Configuration({apiKey: 'token API_TOKEN'})

const creditApi = new CreditApi(configuration)

let requestParameters = {
  page: 1
}

creditApi.creditHistory(requestParameters).then(function (data) {console.log(data)})
```

## API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{classname}}* | **{{operationId}}** | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Get help / support

Please contact [support@ducksms.com](mailto:support@ducksms.com?subject=[GitHub]%20ducksms-go) and we can take more direct action toward finding a solution.
